#include<bits/stdc++.h>
using namespace std;
long int p, q, n, t, flag, e[100], d[100], temp[100], j, m[100], en[100], i;
string encrypt,decrypt;
unsigned char num[10]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36,};
unsigned char mcolumns[4][4]={
    {0x02,0x03,0x01,0x01},{0x01,0x02,0x03,0x01},
    {0x01,0x01,0x02,0x03},{0x03,0x01,0x01,0x02},
};
unsigned char mcolumnsinv[4][4]={
    {0x0e,0x0b,0x0d,0x09},{0x09,0x0e,0x0b,0x0d},
    {0x0d,0x09,0x0e,0x0b},{0x0b,0x0d,0x09,0x0e},
};
unsigned char sbox[256]={0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, 
};
unsigned char sboxinv[256]={0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d, 
};
unsigned char req[256]={0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 
};
int prime(long int pr)
{
    int i;
    j = sqrt(pr);
    for (i = 2; i <= j; i++)
    {
        if (pr % i == 0)
            return 0;
    }
    return 1;
}
long int cd(long int x)
{
    long int k = 1;
    while (1)
    {
        k = k + t;
        if (k % x == 0)
            return (k / x);
    }
}
void ce()
{
    int k;
    k = 0;
    for (i = 2; i < t; i++)
    {
        if (t % i == 0)
            continue;
        flag = prime(i);
        if (flag == 1 && i != p && i != q)
        {
            e[k] = i;
            flag = cd(e[k]);
            if (flag > 0)
            {
                d[k] = flag;
                k++;
            }
            if (k == 99)
                break;
        }
    }
}
void encryptRSA()
{
    long int pt, ct, key = e[0], k, len;
    i = 0;
    len = 16;
    while (i != len)
    {
        pt = m[i];
        pt = pt - 96;
        k = 1;
        for (j = 0; j < key; j++)
        {
            k = k * pt;
            k = k % n;
        }
        temp[i] = k;
        ct = k + 96;
        en[i] = ct;
        i++;
    }
    en[i] = -1;
    for (i = 0; en[i] != -1; i++)
        encrypt+=en[i];
}
void decryptRSA(unsigned char mat[][4])
{
    long int pt, ct, key = d[0], k;
    i = 0;
    while (en[i] != -1)
    {
        ct = temp[i];
        k = 1;
        for (j = 0; j < key; j++)
        {
            k = k * ct;
            k = k % n;
        }
        pt = k + 96;
        m[i] = pt;
        i++;
    }
    m[i] = -1;
    for (i = 0; m[i] != -1; i++){
        mat[i%4][i/4]=req[m[i]];
    }
}
void pre(unsigned char w[][4])
{
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++)
            m[i*4+j]=w[j][i];
    }
    n = p * q;
    t = (p - 1) * (q - 1);
    ce();
}
void create(unsigned char w[][4],string s){
    for(int i=0;i<16;i++)
        w[i%4][i/4]=req[int(s[i])];
}
void xorier(unsigned char mat[][4],unsigned char w[][4]){
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            mat[i][j]=mat[i][j]^w[i][j];
}
void substitute(unsigned char mat[][4]){
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            mat[i][j]=sbox[mat[i][j]];
}
void substituteinv(unsigned char mat[][4]){
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            mat[i][j]=sboxinv[mat[i][j]];
}
void shift(unsigned char mat[][4]){
    for(int i=0;i<4;i++){
        unsigned char temp[4];
        int id=0;
        for(int j=i;j<4;j++)
            temp[id++]=mat[i][j];
        for(int j=0;j<i;j++)
            temp[id++]=mat[i][j];
        for(int j=0;j<4;j++)
            mat[i][j]=temp[j];
    }
}
void shiftinv(unsigned char mat[][4]){
    for(int i=0;i<4;i++){
        unsigned char temp[4];
        int id=0;
        for(int j=4-i;j<4;j++)
            temp[id++]=mat[i][j];
        for(int j=0;j<4-i;j++)
            temp[id++]=mat[i][j];
        for(int j=0;j<4;j++)
            mat[i][j]=temp[j];
    }
}
unsigned char gmul(unsigned char a, unsigned char b) {
    unsigned char p = 0;
    unsigned char counter;
    unsigned char hi_bit_set;
    for(counter = 0; counter < 8; counter++) {
        if((b & 1) == 1) 
            p ^= a;
        hi_bit_set = (a & 0x80);
        a <<= 1;
        if(hi_bit_set == 0x80) 
            a ^= 0x1b;      
        b >>= 1;
    }
    return p;
}
void mixcolumn(unsigned char mat[][4]){
    unsigned char w[4][4];
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            unsigned char temp=0x00;
            for(int k=0;k<4;k++){
                temp=temp^gmul(mcolumns[i][k],mat[k][j]);
            }
            w[i][j]=temp;
        }
    }
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            mat[i][j]=w[i][j];
}
void mixcolumninv(unsigned char mat[][4]){
    unsigned char w[4][4];
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            unsigned char temp=0x00;
            for(int k=0;k<4;k++){
                temp=temp^gmul(mcolumnsinv[i][k],mat[k][j]);
            }
            w[i][j]=temp;
        }
    }
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            mat[i][j]=w[i][j];
}
void expand(unsigned char w[][4],unsigned char x){
    unsigned char p=w[0][3];
    unsigned char temp[4];
    for(int i=0;i<3;i++)
        temp[i]=w[i+1][3];
    temp[3]=p;
    for(int i=0;i<4;i++)
        temp[i]=sbox[temp[i]];
    temp[0]=(temp[0]^x);
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            w[j][i]=w[j][i]^temp[j];
        }
        for(int j=0;j<4;j++)
            temp[j]=w[j][i];
    }
}
void expandinv(unsigned char w[][4],unsigned char x){
    for(int i=2;i>=0;i--)
        for(int j=0;j<4;j++){
            w[j][i+1]=w[j][i]^w[j][i+1];
        }
    unsigned char p=w[0][3];
    unsigned char temp[4];
    for(int i=0;i<3;i++)
        temp[i]=w[i+1][3];
    temp[3]=p;
    for(int i=0;i<4;i++)
        temp[i]=sbox[temp[i]];
    temp[0]=(temp[0]^x);
    for(int i=0;i<4;i++)
        w[i][0]=w[i][0]^temp[i];
}
void encryptAES(unsigned char w[][4],unsigned char mat[][4]){
    xorier(mat,w);
    for(int k=0;k<10;k++){
        substitute(mat);
        shift(mat);
        if(k<9)
            mixcolumn(mat);
        expand(w,num[k]);
        xorier(mat,w);
    }
}
void decryptAES(unsigned char w[][4],unsigned char mat[][4]){
    for(int k=9;k>=0;k--){
        xorier(mat,w);
        expandinv(w,num[k]);
        if(k<9)
            mixcolumninv(mat);
        shiftinv(mat);
        substituteinv(mat);
    }
    xorier(mat,w);
    vector<int> converter;
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            converter.push_back(mat[j][i]);
    for(auto p:converter)
        decrypt+=p;
}
int main(){
    encrypt=decrypt="";
    unsigned char w[4][4],copy[4][4];
    string s;
    cout<<"\nENTER AES SECRET KEY\n";
    getline(cin,s);
    int len=s.size();
    while(len<16)
    {
        s+=' ';
        len++;
    }
    create(w,s);
    for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
            copy[i][j]=w[i][j];
    cout<<"\nENTER PLAINTEXT\n";
    getline(cin,s);
    len=s.length();
    cout << "\nENTER FIRST PRIME NUMBER\n";
    cin >> p;
    flag = prime(p);
    if (flag == 0)
    {
        cout << "\nWRONG INPUT\n";
        exit(1);
    }
    cout << "\nENTER ANOTHER PRIME NUMBER\n";
    cin >> q;
    flag = prime(q);
    if (flag == 0 || p == q)
    {
        cout << "\nWRONG INPUT\n";
        exit(1);
    }
    while(len%16){
        s+=' ';
        len++;
    }
    int k=0;
    while(k<len){
        string temp="";
        for(int i=0;i<16;i++,k++)
            temp+=s[k];
        unsigned char mat[4][4];
        create(mat,temp);
        encryptAES(w,mat);
        xorier(mat,copy);
        pre(mat);
        encryptRSA();
        decryptRSA(mat);
        xorier(mat,copy);
        decryptAES(w,mat);
    }
    cout<<"\nENCRYPTED STRING IS \n";
    cout<<encrypt<<endl;
    cout<<"\nDECRYPTED STRING IS\n";
    cout<<decrypt<<endl;
    return 0;
}